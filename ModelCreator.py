import json
import os
import Ada_Utilities as autil

#This class creates the model, links objects in the appropriate way
#  Creates a structure for the middleware (the objects)
#  Creates the front-end widgets and stored procedures to: 
#    1. Select * (index)
#    2a. View a given object (select where id="")
#    2b. Select on a search term
#    3. Insert new object
#    4a. Update existing object (by id="")
#    4b. Update existing object by searchterm
#    5a. Delete existing object (by id="")
#    5b. Delete existing object by search term
class DataModel:
  #This initializes the DataModel for a new app. 

  def __init__(self, appName):
    self.appName = appName
    self.classes = {}

  def addClass(self, className, properties):
    self.classes[className] = {"name": className}
    properties["ada_id"] = {"name": "ada_id", "data_type": "integer", "autogenerated": True, "unique": True, "is_Array": False}
    self.classes[className]["properties"] = properties
    return "Success"

  def addProperty(self, className, prop, propName):
    self.classes[className]["properties"][propName] = prop
    return "Success"

  def updateProperty(self, className, propName, key, value):
    self.classes[className]["properties"][propName][key] = value
    return "Success"

  def setClassRelationship(self, class1Name, class2Name, parent_prop_name, relationship):
    if relationship == "child":
      parentClassName = class1Name
      childClassName = class2Name
    elif relationship == "parent":
      parentClassName = class2Name
      childClassName = class1Name

    self.classes[parentClassName]["properties"][parent_prop_name] = {}
    self.classes[parentClassName]["properties"][parent_prop_name]["autogenerated"] = False
    self.classes[parentClassName]["properties"][parent_prop_name]["unique"] = False
    self.classes[parentClassName]["properties"][parent_prop_name]["is_Array"] = True
    self.classes[parentClassName]["properties"][parent_prop_name]["name"] = parent_prop_name
    self.classes[parentClassName]["properties"][parent_prop_name]["data_type"] = childClassName

    return "Success"

  def writeDataModel(self):
    autil.dirCreateCheck(self.appName)
    autil.dirCreateCheck("writerInstructions", relativePath = self.appName)
    
    filehandle = self.appName + "/writerInstructions/datamodel.json"
    #For testing just a dummy file creation
    #filehandle = self.appName + "_datamodel.json"
    with open(filehandle, "w") as myDataFile:
      myDataFile.write(json.dumps(self.classes, indent=2))

    return "Success"