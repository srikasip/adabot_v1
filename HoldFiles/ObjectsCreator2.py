import json
import Ada_Utilities as au

class ObjectsCreator2:
  #This initializes the DataModel for a new app.
  #You can consider this to be the competence of any new class object that is created
  def __init__(self, appName):
    self.appName = appName
    self.knownTypes = ["string", "datetime", "integer", "decimal", "money"]

    self.parseDataModel()

  def parseDataModel(self):    
    #first, let's grab our datamodel
    classesFileText = ""
    modelHandle = self.appName + "/writerInstructions/datamodel.json"
    objectLibraryHandle = self.appName + "/DataObjects.py"

    dataModel = au.getFileJSON(modelHandle)

    classes = list(dataModel.keys())
    classesFileText = self.getImportText() + "\n"
    classesFileText += self.getBaseText() + "\n"


    for a_class in classes:
      classCode = "class %s(BASE):\n" % a_class
      classCode += "\t__tablename__='%s'\n" % a_class
      initText = self.makeClassFileInit(dataModel[a_class])
      getSetText = self.makeClassGetSet(dataModel[a_class])


      classTxt = importText + initText + getSetText
      classHandle = objectLibraryHandle + "/" + a_class  + ".py"

      au.writeText(classHandle, classTxt)
  

  def getImportText(self):
    importTxt = "from sqlalchemy.ext.declarative import declarative_base\n"
    importTxt += "from sqlalchemy import Column, Integer, String, ForeignKey, create_engine\n"
    importTxt += "from sqlalchemy.orm import backref, mapper, relation\n"

    return importTxt

  def getBaseText(self):
    baseTxt = "BASE = declarative_base()\n"
    baseTxt += "APPNAME = '"+self.appName+"'\n"

    return baseTxt

  def fireupText(self):
    fireupText = "ENGINE = create_engine('sqlite:///adaDB_"+self.appName+".db', echo=False)\n"
    fireupText += "BASE.metadata.create_all(ENGINE)\n"
 
  def writeClassData(self, classObj):
    tableCols = []
    initItems = []
    initParams = []
    reprText = []
    pivotClassTxts = []

    propKeys = list(classObj["properties"].keys())
    
    for propKey in propKeys:
      columnTxt = ""
      initTxt = ""
      paramTxt = ""
      reprTxt = ""
      pivotClassText = ""
      prop = classObj["properties"][propKey]

      if prop["is_Array"]:
        if prop["data_type"] in self.knownTypes:
          className = prop["name"]
          tableName = prop["name"] + "_" + classObj["name"] + "_" + "link"
          pivotClassText = "class %s(BASE):\n" % className

          pivotClassText += "\t__tablename__ = '"+tableName+"'\n"
          pivotClassText += "\tada_id = (Integer, primary_key=True)\n"
          pivotClassText += "\t" + prop["name"] + " = Column(" + prop["data_type"]+")\n"
          pivotClassText += "\t" + classObj["name"] + "_ada_id = Column(Integer, ForeignKey('"+classObj["name"]+".ada_id'))\n"
          pivotClassText += "\t" + classObj["name"] + " = relation('"+classObj["name"]+"', backref = backref('"+tableName+"', order_by='ada_id'))"

          pivotClassText += "\tdef __init__(self, sentValue):\n"
          pivotClassText += "\t\tself." + prop["name"] + " = sentValue\n\n"
          pivotClassText += "\tdef __repr__(self):\n"
          pivotClassText += "\t\treturn '<%s: '+self.%s+'>'\n\n" % (prop["name"], prop["name"])


        else:
          pass
      else:
        if prop["data_type"] in self.knownTypes:
          initTxt = "self." + prop["name"] + " = " + prop["name"]
          paramTxt = prop["name"]

          columnTxt += prop["name"] + " = Column(" + prop["data_type"]
          if prop["unique"] and prop["autogenerated"]:
            columnTxt += ", primary_key = True"
            initTxt = ""
            paramTxt = ""

          columnTxt += ")\n"
        else:
          columnTxt = prop["name"] + "_ada_id = Column(Integer, ForeignKey('" + prop["data_type"] + ".ada_id'))\n"
          columnTxt += prop["name"] + " = relation("+prop["data_type"]+", backref=backref('"+classObj["name"]+"', order_by=ada_id))\n"



  def getOneToMany(tableA_name, TableB_name, pivotValue):


  def WriteTableCreation(self, classObj):
    initText = "self.Load_"+classObj["name"] + "()"

    methodText =  "\tdef Load_"+classObj["name"] + "(self):\n"
    methodText += "\t\tadaObj_"+classObj["name"]+" = Table('"+classObj["name"]+"', self.metadata,\n"
    
    propKeys = list(classObj["properties"].keys())
    columns = []
    pivotTables = ""
    pivotTableNames = []
    for prop in propKeys:
      if classObj["properties"][prop]["is_Array"]:
        if classObj["properties"][prop]["data_type"] in self.knownTypes:
          pivotName = classObj["name"]+"_"+classObj["properties"][prop]["name"]
          pivotTableNames.append("adaObj_"+pivotName+ "_pivot")
          pivotTables += "\t\tadaObj_"+pivotName+"_pivot = Table('" + pivotName + "', self.metadata,\n"
          pivotTables += "\t\t\tColumn('" + classObj["name"] + "_ada_id', Integer),\n"
          pivotTables += "\t\t\tColumn('" + classObj["properties"][prop]["name"] + "', "+classObj["properties"][prop]["data_type"]+"),\n"
          pivotTables += "\t\t\tColumn('" + pivotName + "_ada_id', Integer, primary_key=True)\n"
          pivotTables += "\t\t)\n\n"
        else:
          pivotName = classObj["name"]+"_"+classObj["properties"][prop]["name"]
          pivotTables += "\t\tadaObj_"+pivotName+"_pivot = Table('" + pivotName + "', self.metadata,\n"
          pivotTables += "\t\t\tColumn('" + classObj["name"] + "_ada_id', Integer),\n"
          pivotTables += "\t\t\tColumn('" + classObj["properties"][prop]["data_type"] + "_ada_id', Integer),\n"
          pivotTables += "\t\t\tColumn('" + classObj["properties"][prop]["name"] + "_ada_id', Integer, primary_key=True)\n"
          pivotTables += "\t\t)\n\n"
      else:
        if classObj["properties"][prop]["data_type"] in self.knownTypes:
          columnText = "\t\t\tColumn('"+classObj["properties"][prop]["name"]+"', "
          columnText += classObj["properties"][prop]["data_type"]
          if classObj["properties"][prop]["unique"] and classObj["properties"][prop]["autogenerated"]:
            columnText += ", primary_key=True"

          columnText += ")"
        else:
          columnText = "\t\t\tColumn('"+classObj["properties"][prop]["name"]+"_ada_id', "
          columnText += "Integer)"

        columns.append(columnText)

    columnText = ",\n".join(columns)

    methodText += columnText + "\n"
    methodText += "\t\t)\n"
    methodText += pivotTables
    methodText += "\t\tadaObj_"+classObj["name"]+".create(bind=self.db_engine, checkfirst=True)\n"
    
    for pivot in pivotTableNames:
      methodText += "\n\t\t"+pivot + ".create(bind=self.db_engine, checkfirst=True)"

    methodText += "\n"
    
    return initText, methodText
