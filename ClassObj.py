class ClassObj:
  def __init__(self, className = ""):
    self.className = className
    self.tableName = ""
    self.columnDefinition = ""
    self.initDefinition = ""
    self.initParameters = []
    self.reprDefinition = ""

  def getClassText(self):
    self.tableName = self.getTableFromClass(self.className)
    self.reprDefinition = self.finishRepr()

    classTxt = "class " + self.className + "(BASE):\n"
    classTxt += "\t__tablename__ = '"+self.tableName+"'\n\n"
    classTxt += "\t" + self.columnDefinition.replace("\n", "\n\t") + "\n\n"
    classTxt += "\tdef __init__(self, " + ", ".join(self.initParameters) + "):\n"
    classTxt += "\t\t" + self.initDefinition.replace("\n", "\n\t\t")
    classTxt += "\n\n"
    classTxt += "\tdef __repr__(self):\n"
    classTxt += "\t\t" + self.reprDefinition.replace("\n", "\n\t\t")
    classTxt += "\n"

    return classTxt

  def addUnknownArray(self, propDict1, classDict1, classDict2, classObj2):
    pivotTableName = classDict1["name"] + classDict2["name"] + propDict1["name"] + "list"
    pivotTable = ClassObj(pivotTableName)

    pivot_props = {
      propDict1["data_type"]: {
        "autogenerated": False, 
        "is_Array": False, 
        "unique": False, 
        "name": propDict1["name"], 
        "data_type": propDict1["data_type"]
      }, 
      "ada_id": {
        "autogenerated": True, 
        "is_Array": False, 
        "unique": True, 
        "name": "ada_id", 
        "data_type": "integer"
      }, 
      classDict1["name"]: {
        "autogenerated": False, 
        "is_Array": False, 
        "unique": False, 
        "name": classDict1["name"], 
        "data_type": classDict1["name"]
      }
    }

    for p_prop in pivot_props:
      pivotTable.newProperty(pivot_props[p_prop])

    self.add2ndReference(propDict1["name"], classDict2["name"], pivotTableName)
    classObj2.add2ndReference(classDict1["name"], classDict1["name"], pivotTableName)

    return {"class2": classObj2, "pivotTable": pivotTable}


  def add2ndReference(self, varName, className, pivotTableName):
    
    self.columnDefinition += varName + " = relationship('"+className+"', secondary='"+pivotTableName+"'))\n"


  def addKnownArray(self, propDict, classDict):
    pivotTableName = classDict["name"] + propDict["name"] + "List"
    pivotTable = ClassObj(pivotTableName)
    props = {
      propDict["name"]: {
        "autogenerated": False, 
        "is_Array": False, 
        "unique": False, 
        "name": propDict["name"], 
        "data_type": propDict["data_type"]
      }, 
      "ada_id": {
        "autogenerated": True, 
        "is_Array": False, 
        "unique": True, 
        "name": "ada_id", 
        "data_type": "integer"
      }, 
      classDict["name"]: {
        "autogenerated": False, 
        "is_Array": False, 
        "unique": False, 
        "name": classDict["name"], 
        "data_type": classDict["name"]
      }
    }

    for a_prop in props:
      pivotTable.newProperty(props[a_prop])

    return pivotTable




  def newProperty(self, propDict):
    isKnown, dType = self.getDBType(propDict["data_type"])

    if propDict["is_Array"] != True:
      if isKnown:
        self.initParameters.append(propDict["name"])
        self.initDefinition += "self." + propDict["name"] + " = " + propDict["name"] + "\n"
        self.reprDefinition += "repr += '" + propDict["name"] + ": ' + self." + propDict["name"] + "\n"

        self.columnDefinition += propDict["name"] + " = Column("+ dType
        
        if propDict["unique"] and propDict["autogenerated"]:
          self.columnDefinition += ", primary_key = True"
        elif propDict["unique"]:
          self.columnDefinition += ", unique = True"
        

        self.columnDefinition += ")\n"
        
      else:
        dTypeClass = self.getTableFromClass(propDict["data_type"])
        backRefName = self.className
        
        self.columnDefinition += propDict["name"] + "_id = Column(Integer, ForeignKey('" + dTypeClass+".ada_id'))\n"
        self.columnDefinition += dTypeClass + " = relationship("+propDict["data_type"]+", backref=backref('"+backRefName+"'))\n"
  
    else:
      return False

    return True

  
  def getDBType(self, dType):
    returnType = "Integer"
    isKnownType = True

    if dType == "integer":
      returnType = "Integer"
    elif dType == "string":
      returnType = "String"
    elif dType == "money":
      returnType = "Float(2)"
    elif dType == "decimal":
      returnType = "Float(8)"
    elif dType == "datetime":
      returnTyle = "DateTime"
    else:
      returnType = ""
      isKnownType = False

    return isKnownType, returnType

  def finishRepr(self):
    reprString = "repr = ''\n"
    reprString += self.reprDefinition + "\n"
    reprString += "return repr"

    return reprString

  def getTableFromClass(self, className):
    return className