from ObjectCreator import ObjectCreator as classWriter
from ControllerCreator import ControllerCreator as controllerCreator

from ModelCreator import DataModel
from Architect import Architect as Architect


def main():
  appName = "TestApp"

  print("Writing Project Structure")
  architect = Architect(appName)
  print("Finished Writing Project Structure")



  print("Creating the data model")
  fakeModelCreation(appName)
  print("Finished creating the data model")



  print("Writing Object Model File")
  testClasses = classWriter(appName)
  print("Finished Object Model File")

  print("Writing Class Files")
  classFiles = controllerCreator(appName)
  print("Finished Writing Class Files")

  print("Write Dynamic Page Dependencies")
  architect.makeDynamicHelper()
  architect.loadTemplatePages()
  print("Finished Writing Dependencies")
  

def fakeModelCreation(appName):
  testApp = DataModel(appName)

  class1Properties = {
    "name": {"name": "name", "data_type": "string", "autogenerated": False, "unique": False, "is_Array": False},
    "age": {"name": "age", "data_type":"integer", "autogenerated": False, "unique": False, "is_Array": False}
  }
  class2Properties = {
    "name": {"name": "name", "data_type": "string", "autogenerated": False, "unique": False, "is_Array": False},
    "color": {"name": "color", "data_type": "string", "autogenerated": False, "unique": False, "is_Array": False}
  }

  testApp.addClass("Person", class1Properties)
  testApp.addClass("Color", class2Properties)

  newProp = {"name": "hashCode", "data_type": "string", "autogenerated": False, "unique": False, "is_Array": True}
  testApp.addProperty("Color", newProp, "hashCode")

  testApp.setClassRelationship("Person", "Color", "favorite_colors", "child")

  testApp.writeDataModel()


  
if __name__ == "__main__": main()